{"version":3,"file":"wavesurfer.timeline.min.js","mappings":"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","sources":["webpack://WaveSurfer.[name]/webpack/universalModuleDefinition","webpack://WaveSurfer.[name]/./src/plugin/timeline/index.js","webpack://WaveSurfer.[name]/webpack/bootstrap","webpack://WaveSurfer.[name]/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"timeline\"] = factory();\n})(self, function() {\nreturn ","/**\r\n * @typedef {Object} TimelinePluginParams\r\n * @desc Extends the `WavesurferParams` wavesurfer was initialised with\r\n * @property {!string|HTMLElement} container CSS selector or HTML element where\r\n * the timeline should be drawn. This is the only required parameter.\r\n * @property {number} notchPercentHeight=90 Height of notches in percent\r\n * @property {string} unlabeledNotchColor='#c0c0c0' The colour of the notches\r\n * that do not have labels\r\n * @property {string} primaryColor='#000' The colour of the main notches\r\n * @property {string} secondaryColor='#c0c0c0' The colour of the secondary\r\n * notches\r\n * @property {string} primaryFontColor='#000' The colour of the labels next to\r\n * the main notches\r\n * @property {string} secondaryFontColor='#000' The colour of the labels next to\r\n * the secondary notches\r\n * @property {number} labelPadding=5 The padding between the label and the notch\r\n * @property {?number} zoomDebounce A debounce timeout to increase rendering\r\n * performance for large files\r\n * @property {string} fontFamily='Arial'\r\n * @property {number} fontSize=10 Font size of labels in pixels\r\n * @property {?number} duration Length of the track in seconds. Overrides\r\n * getDuration() for setting length of timeline\r\n * @property {function} formatTimeCallback (sec, pxPerSec) -> label\r\n * @property {function} timeInterval (pxPerSec) -> seconds between notches\r\n * @property {function} primaryLabelInterval (pxPerSec) -> cadence between\r\n * labels in primary color\r\n * @property {function} secondaryLabelInterval (pxPerSec) -> cadence between\r\n * labels in secondary color\r\n * @property {?number} offset Offset for the timeline start in seconds. May also be\r\n * negative.\r\n * @property {?boolean} deferInit Set to true to manually call\r\n * `initPlugin('timeline')`\r\n */\r\n\r\n/**\r\n * Adds a timeline to the waveform.\r\n *\r\n * @implements {PluginClass}\r\n * @extends {Observer}\r\n * @example\r\n * // es6\r\n * import TimelinePlugin from 'wavesurfer.timeline.js';\r\n *\r\n * // commonjs\r\n * var TimelinePlugin = require('wavesurfer.timeline.js');\r\n *\r\n * // if you are using <script> tags\r\n * var TimelinePlugin = window.WaveSurfer.timeline;\r\n *\r\n * // ... initialising wavesurfer with the plugin\r\n * var wavesurfer = WaveSurfer.create({\r\n *   // wavesurfer options ...\r\n *   plugins: [\r\n *     TimelinePlugin.create({\r\n *       // plugin options ...\r\n *     })\r\n *   ]\r\n * });\r\n */\r\nexport default class TimelinePlugin {\r\n    /**\r\n     * Timeline plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * @param  {TimelinePluginParams} params parameters use to initialise the plugin\r\n     * @return {PluginDefinition} an object representing the plugin\r\n     */\r\n    static create(params) {\r\n        return {\r\n            name: 'timeline',\r\n            deferInit: params && params.deferInit ? params.deferInit : false,\r\n            params: params,\r\n            instance: TimelinePlugin\r\n        };\r\n    }\r\n\r\n    // event handlers\r\n    _onScroll = () => {\r\n        if (this.wrapper && this.drawer.wrapper) {\r\n            this.wrapper.scrollLeft = this.drawer.wrapper.scrollLeft;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @returns {void}\r\n     */\r\n    _onRedraw = () => this.render();\r\n\r\n    _onReady = () => {\r\n        const ws = this.wavesurfer;\r\n        this.drawer = ws.drawer;\r\n        this.pixelRatio = ws.drawer.params.pixelRatio;\r\n        this.maxCanvasWidth = ws.drawer.maxCanvasWidth || ws.drawer.width;\r\n        this.maxCanvasElementWidth =\r\n            ws.drawer.maxCanvasElementWidth ||\r\n            Math.round(this.maxCanvasWidth / this.pixelRatio);\r\n\r\n        // add listeners\r\n        ws.drawer.wrapper.addEventListener('scroll', this._onScroll);\r\n        ws.on('redraw', this._onRedraw);\r\n        ws.on('zoom', this._onZoom);\r\n\r\n        this.render();\r\n    };\r\n\r\n    /**\r\n     * @param {object} e Click event\r\n     */\r\n    _onWrapperClick = e => {\r\n        e.preventDefault();\r\n        const relX = 'offsetX' in e ? e.offsetX : e.layerX;\r\n        this.fireEvent('click', relX / this.wrapper.scrollWidth || 0);\r\n    };\r\n\r\n    /**\r\n     * Creates an instance of TimelinePlugin.\r\n     *\r\n     * You probably want to use TimelinePlugin.create()\r\n     *\r\n     * @param {TimelinePluginParams} params Plugin parameters\r\n     * @param {object} ws Wavesurfer instance\r\n     */\r\n    constructor(params, ws) {\r\n        this.container =\r\n            'string' == typeof params.container\r\n                ? document.querySelector(params.container)\r\n                : params.container;\r\n\r\n        if (!this.container) {\r\n            throw new Error('No container for wavesurfer timeline');\r\n        }\r\n\r\n        this.wavesurfer = ws;\r\n        this.util = ws.util;\r\n        this.params = Object.assign(\r\n            {},\r\n            {\r\n                height: 20,\r\n                notchPercentHeight: 90,\r\n                labelPadding: 5,\r\n                unlabeledNotchColor: '#c0c0c0',\r\n                primaryColor: '#000',\r\n                secondaryColor: '#c0c0c0',\r\n                primaryFontColor: '#000',\r\n                secondaryFontColor: '#000',\r\n                fontFamily: 'Arial',\r\n                fontSize: 10,\r\n                duration: null,\r\n                zoomDebounce: false,\r\n                formatTimeCallback: this.defaultFormatTimeCallback,\r\n                timeInterval: this.defaultTimeInterval,\r\n                primaryLabelInterval: this.defaultPrimaryLabelInterval,\r\n                secondaryLabelInterval: this.defaultSecondaryLabelInterval,\r\n                offset: 0\r\n            },\r\n            params\r\n        );\r\n\r\n        this.canvases = [];\r\n        this.wrapper = null;\r\n        this.drawer = null;\r\n        this.pixelRatio = null;\r\n        this.maxCanvasWidth = null;\r\n        this.maxCanvasElementWidth = null;\r\n        /**\r\n         * This event handler has to be in the constructor function because it\r\n         * relies on the debounce function which is only available after\r\n         * instantiation\r\n         *\r\n         * Use a debounced function if `params.zoomDebounce` is defined\r\n         *\r\n         * @returns {void}\r\n         */\r\n        this._onZoom = this.params.zoomDebounce\r\n            ? this.wavesurfer.util.debounce(\r\n                () => this.render(),\r\n                this.params.zoomDebounce\r\n            )\r\n            : () => this.render();\r\n    }\r\n\r\n    /**\r\n     * Initialisation function used by the plugin API\r\n     */\r\n    init() {\r\n        // Check if ws is ready\r\n        if (this.wavesurfer.isReady) {\r\n            this._onReady();\r\n        } else {\r\n            this.wavesurfer.once('ready', this._onReady);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy function used by the plugin API\r\n     */\r\n    destroy() {\r\n        this.unAll();\r\n        this.wavesurfer.un('redraw', this._onRedraw);\r\n        this.wavesurfer.un('zoom', this._onZoom);\r\n        this.wavesurfer.un('ready', this._onReady);\r\n        this.wavesurfer.drawer.wrapper.removeEventListener(\r\n            'scroll',\r\n            this._onScroll\r\n        );\r\n        if (this.wrapper && this.wrapper.parentNode) {\r\n            this.wrapper.removeEventListener('click', this._onWrapperClick);\r\n            this.wrapper.parentNode.removeChild(this.wrapper);\r\n            this.wrapper = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a timeline element to wrap the canvases drawn by this plugin\r\n     *\r\n     */\r\n    createWrapper() {\r\n        const wsParams = this.wavesurfer.params;\r\n        this.container.innerHTML = '';\r\n        this.wrapper = this.container.appendChild(\r\n            document.createElement('timeline')\r\n        );\r\n        this.util.style(this.wrapper, {\r\n            display: 'block',\r\n            position: 'relative',\r\n            userSelect: 'none',\r\n            webkitUserSelect: 'none',\r\n            height: `${this.params.height}px`\r\n        });\r\n\r\n        if (wsParams.fillParent || wsParams.scrollParent) {\r\n            this.util.style(this.wrapper, {\r\n                width: '100%',\r\n                overflowX: 'hidden',\r\n                overflowY: 'hidden'\r\n            });\r\n        }\r\n\r\n        this.wrapper.addEventListener('click', this._onWrapperClick);\r\n    }\r\n\r\n    /**\r\n     * Render the timeline (also updates the already rendered timeline)\r\n     *\r\n     */\r\n    render() {\r\n        if (!this.wrapper) {\r\n            this.createWrapper();\r\n        }\r\n        this.updateCanvases();\r\n        this.updateCanvasesPositioning();\r\n        this.renderCanvases();\r\n    }\r\n\r\n    /**\r\n     * Add new timeline canvas\r\n     *\r\n     */\r\n    addCanvas() {\r\n        const canvas = this.wrapper.appendChild(\r\n            document.createElement('canvas')\r\n        );\r\n        this.canvases.push(canvas);\r\n        this.util.style(canvas, {\r\n            position: 'absolute',\r\n            zIndex: 4\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Remove timeline canvas\r\n     *\r\n     */\r\n    removeCanvas() {\r\n        const canvas = this.canvases.pop();\r\n        canvas.parentElement.removeChild(canvas);\r\n    }\r\n\r\n    /**\r\n     * Make sure the correct of timeline canvas elements exist and are cached in\r\n     * this.canvases\r\n     *\r\n     */\r\n    updateCanvases() {\r\n        const totalWidth = Math.round(this.drawer.wrapper.scrollWidth);\r\n        const requiredCanvases = Math.ceil(\r\n            totalWidth / this.maxCanvasElementWidth\r\n        );\r\n\r\n        while (this.canvases.length < requiredCanvases) {\r\n            this.addCanvas();\r\n        }\r\n\r\n        while (this.canvases.length > requiredCanvases) {\r\n            this.removeCanvas();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the dimensions and positioning style for all the timeline canvases\r\n     *\r\n     */\r\n    updateCanvasesPositioning() {\r\n        // cache length for performance\r\n        const canvasesLength = this.canvases.length;\r\n        this.canvases.forEach((canvas, i) => {\r\n            // canvas width is the max element width, or if it is the last the\r\n            // required width\r\n            const canvasWidth =\r\n                i === canvasesLength - 1\r\n                    ? this.drawer.wrapper.scrollWidth -\r\n                      this.maxCanvasElementWidth * (canvasesLength - 1)\r\n                    : this.maxCanvasElementWidth;\r\n            // set dimensions and style\r\n            canvas.width = canvasWidth * this.pixelRatio;\r\n            // on certain pixel ratios the canvas appears cut off at the bottom,\r\n            // therefore leave 1px extra\r\n            canvas.height = (this.params.height + 1) * this.pixelRatio;\r\n            this.util.style(canvas, {\r\n                width: `${canvasWidth}px`,\r\n                height: `${this.params.height}px`,\r\n                left: `${i * this.maxCanvasElementWidth}px`\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Render the timeline labels and notches\r\n     *\r\n     */\r\n    renderCanvases() {\r\n        const duration =\r\n            this.params.duration ||\r\n            this.wavesurfer.backend.getDuration();\r\n\r\n        if (duration <= 0) {\r\n            return;\r\n        }\r\n        const wsParams = this.wavesurfer.params;\r\n        const fontSize = this.params.fontSize * wsParams.pixelRatio;\r\n        const totalSeconds = parseInt(duration, 10) + 1;\r\n        const width =\r\n            wsParams.fillParent && !wsParams.scrollParent\r\n                ? this.drawer.getWidth()\r\n                : this.drawer.wrapper.scrollWidth * wsParams.pixelRatio;\r\n        const height1 = this.params.height * this.pixelRatio;\r\n        const height2 =\r\n            this.params.height *\r\n            (this.params.notchPercentHeight / 100) *\r\n            this.pixelRatio;\r\n        const pixelsPerSecond = width / duration;\r\n\r\n        const formatTime = this.params.formatTimeCallback;\r\n        // if parameter is function, call the function with\r\n        // pixelsPerSecond, otherwise simply take the value as-is\r\n        const intervalFnOrVal = option =>\r\n            typeof option === 'function' ? option(pixelsPerSecond) : option;\r\n        const timeInterval = intervalFnOrVal(this.params.timeInterval);\r\n        const primaryLabelInterval = intervalFnOrVal(\r\n            this.params.primaryLabelInterval\r\n        );\r\n        const secondaryLabelInterval = intervalFnOrVal(\r\n            this.params.secondaryLabelInterval\r\n        );\r\n\r\n        let curPixel = pixelsPerSecond * this.params.offset;\r\n        let curSeconds = 0;\r\n        let i;\r\n        // build an array of position data with index, second and pixel data,\r\n        // this is then used multiple times below\r\n        const positioning = [];\r\n        for (i = 0; i < totalSeconds / timeInterval; i++) {\r\n            positioning.push([i, curSeconds, curPixel]);\r\n            curSeconds += timeInterval;\r\n            curPixel += pixelsPerSecond * timeInterval;\r\n        }\r\n\r\n        // iterate over each position\r\n        const renderPositions = cb => {\r\n            positioning.forEach(pos => {\r\n                cb(pos[0], pos[1], pos[2]);\r\n            });\r\n        };\r\n\r\n        // render primary labels\r\n        this.setFillStyles(this.params.primaryColor);\r\n        this.setFonts(`${fontSize}px ${this.params.fontFamily}`);\r\n        this.setFillStyles(this.params.primaryFontColor);\r\n        renderPositions((i, curSeconds, curPixel) => {\r\n            if (i % primaryLabelInterval === 0) {\r\n                this.fillRect(curPixel, 0, 1, height1);\r\n                this.fillText(\r\n                    formatTime(curSeconds, pixelsPerSecond),\r\n                    curPixel + this.params.labelPadding * this.pixelRatio,\r\n                    height1\r\n                );\r\n            }\r\n        });\r\n\r\n        // render secondary labels\r\n        this.setFillStyles(this.params.secondaryColor);\r\n        this.setFonts(`${fontSize}px ${this.params.fontFamily}`);\r\n        this.setFillStyles(this.params.secondaryFontColor);\r\n        renderPositions((i, curSeconds, curPixel) => {\r\n            if (i % secondaryLabelInterval === 0) {\r\n                this.fillRect(curPixel, 0, 1, height1);\r\n                this.fillText(\r\n                    formatTime(curSeconds, pixelsPerSecond),\r\n                    curPixel + this.params.labelPadding * this.pixelRatio,\r\n                    height1\r\n                );\r\n            }\r\n        });\r\n\r\n        // render the actual notches (when no labels are used)\r\n        this.setFillStyles(this.params.unlabeledNotchColor);\r\n        renderPositions((i, curSeconds, curPixel) => {\r\n            if (\r\n                i % secondaryLabelInterval !== 0 &&\r\n                i % primaryLabelInterval !== 0\r\n            ) {\r\n                this.fillRect(curPixel, 0, 1, height2);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set the canvas fill style\r\n     *\r\n     * @param {DOMString|CanvasGradient|CanvasPattern} fillStyle Fill style to\r\n     * use\r\n     */\r\n    setFillStyles(fillStyle) {\r\n        this.canvases.forEach(canvas => {\r\n            const context = canvas.getContext('2d');\r\n            if (context) {\r\n                context.fillStyle = fillStyle;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set the canvas font\r\n     *\r\n     * @param {DOMString} font Font to use\r\n     */\r\n    setFonts(font) {\r\n        this.canvases.forEach(canvas => {\r\n            const context = canvas.getContext('2d');\r\n            if (context) {\r\n                context.font = font;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Draw a rectangle on the canvases\r\n     *\r\n     * (it figures out the offset for each canvas)\r\n     *\r\n     * @param {number} x X-position\r\n     * @param {number} y Y-position\r\n     * @param {number} width Width\r\n     * @param {number} height Height\r\n     */\r\n    fillRect(x, y, width, height) {\r\n        this.canvases.forEach((canvas, i) => {\r\n            const leftOffset = i * this.maxCanvasWidth;\r\n\r\n            const intersection = {\r\n                x1: Math.max(x, i * this.maxCanvasWidth),\r\n                y1: y,\r\n                x2: Math.min(x + width, i * this.maxCanvasWidth + canvas.width),\r\n                y2: y + height\r\n            };\r\n\r\n            if (intersection.x1 < intersection.x2) {\r\n                const context = canvas\r\n                    .getContext('2d');\r\n                if (context) {\r\n                    context\r\n                        .fillRect(\r\n                            intersection.x1 - leftOffset,\r\n                            intersection.y1,\r\n                            intersection.x2 - intersection.x1,\r\n                            intersection.y2 - intersection.y1\r\n                        );\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fill a given text on the canvases\r\n     *\r\n     * @param {string} text Text to render\r\n     * @param {number} x X-position\r\n     * @param {number} y Y-position\r\n     */\r\n    fillText(text, x, y) {\r\n        let textWidth;\r\n        let xOffset = 0;\r\n\r\n        this.canvases.forEach(canvas => {\r\n            const context = canvas.getContext('2d');\r\n            if (context) {\r\n                const canvasWidth = context.canvas.width;\r\n\r\n                if (xOffset > x + textWidth) {\r\n                    return;\r\n                }\r\n\r\n                if (xOffset + canvasWidth > x && context) {\r\n                    textWidth = context.measureText(text).width;\r\n                    context.fillText(text, x - xOffset, y);\r\n                }\r\n\r\n                xOffset += canvasWidth;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Turn the time into a suitable label for the time.\r\n     *\r\n     * @param {number} seconds Seconds to format\r\n     * @param {number} pxPerSec Pixels per second\r\n     * @returns {number} Time\r\n     */\r\n    defaultFormatTimeCallback(seconds, pxPerSec) {\r\n        if (seconds / 60 > 1) {\r\n            // calculate minutes and seconds from seconds count\r\n            const minutes = parseInt(seconds / 60, 10);\r\n            seconds = parseInt(seconds % 60, 10);\r\n            // fill up seconds with zeroes\r\n            seconds = seconds < 10 ? '0' + seconds : seconds;\r\n            return `${minutes}:${seconds}`;\r\n        }\r\n        return Math.round(seconds * 1000) / 1000;\r\n    }\r\n\r\n    /**\r\n     * Return how many seconds should be between each notch\r\n     *\r\n     * @param {number} pxPerSec Pixels per second\r\n     * @returns {number} Time\r\n     */\r\n    defaultTimeInterval(pxPerSec) {\r\n        if (pxPerSec >= 25) {\r\n            return 1;\r\n        } else if (pxPerSec * 5 >= 25) {\r\n            return 5;\r\n        } else if (pxPerSec * 15 >= 25) {\r\n            return 15;\r\n        }\r\n        return Math.ceil(0.5 / pxPerSec) * 60;\r\n    }\r\n\r\n    /**\r\n     * Return the cadence of notches that get labels in the primary color.\r\n     *\r\n     * @param {number} pxPerSec Pixels per second\r\n     * @returns {number} Cadence\r\n     */\r\n    defaultPrimaryLabelInterval(pxPerSec) {\r\n        if (pxPerSec >= 25) {\r\n            return 10;\r\n        } else if (pxPerSec * 5 >= 25) {\r\n            return 6;\r\n        } else if (pxPerSec * 15 >= 25) {\r\n            return 4;\r\n        }\r\n        return 4;\r\n    }\r\n\r\n    /**\r\n     * Return the cadence of notches that get labels in the secondary color.\r\n     *\r\n     * @param {number} pxPerSec Pixels per second\r\n     * @returns {number} Cadence\r\n     */\r\n    defaultSecondaryLabelInterval(pxPerSec) {\r\n        if (pxPerSec >= 25) {\r\n            return 5;\r\n        } else if (pxPerSec * 5 >= 25) {\r\n            return 2;\r\n        } else if (pxPerSec * 15 >= 25) {\r\n            return 2;\r\n        }\r\n        return 2;\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(171);\n"],"names":["root","factory","exports","module","define","amd","self","TimelinePlugin","params","ws","wrapper","drawer","scrollLeft","render","wavesurfer","pixelRatio","maxCanvasWidth","width","maxCanvasElementWidth","Math","round","addEventListener","_onScroll","on","_onRedraw","_onZoom","e","preventDefault","relX","offsetX","layerX","fireEvent","scrollWidth","this","container","document","querySelector","Error","util","Object","assign","height","notchPercentHeight","labelPadding","unlabeledNotchColor","primaryColor","secondaryColor","primaryFontColor","secondaryFontColor","fontFamily","fontSize","duration","zoomDebounce","formatTimeCallback","defaultFormatTimeCallback","timeInterval","defaultTimeInterval","primaryLabelInterval","defaultPrimaryLabelInterval","secondaryLabelInterval","defaultSecondaryLabelInterval","offset","canvases","debounce","name","deferInit","instance","isReady","_onReady","once","unAll","un","removeEventListener","parentNode","_onWrapperClick","removeChild","wsParams","innerHTML","appendChild","createElement","style","display","position","userSelect","webkitUserSelect","fillParent","scrollParent","overflowX","overflowY","createWrapper","updateCanvases","updateCanvasesPositioning","renderCanvases","canvas","push","zIndex","pop","parentElement","totalWidth","requiredCanvases","ceil","length","addCanvas","removeCanvas","canvasesLength","forEach","i","canvasWidth","left","backend","getDuration","totalSeconds","parseInt","getWidth","height1","height2","pixelsPerSecond","formatTime","intervalFnOrVal","option","curPixel","curSeconds","positioning","renderPositions","cb","pos","setFillStyles","setFonts","fillRect","fillText","fillStyle","context","getContext","font","x","y","leftOffset","intersection","x1","max","y1","x2","min","y2","text","textWidth","xOffset","measureText","seconds","pxPerSec","minutes","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}