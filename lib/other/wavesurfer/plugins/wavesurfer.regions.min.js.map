{"version":3,"file":"wavesurfer.regions.min.js","mappings":"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","sources":["webpack://WaveSurfer.[name]/webpack/universalModuleDefinition","webpack://WaveSurfer.[name]/./src/plugin/regions/index.js","webpack://WaveSurfer.[name]/./src/plugin/regions/region.js","webpack://WaveSurfer.[name]/webpack/bootstrap","webpack://WaveSurfer.[name]/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"regions\"] = factory();\n})(self, function() {\nreturn ","/**\r\n *  @since 4.0.0 This class has been split\r\n *\r\n * @typedef {Object} RegionsPluginParams\r\n * @property {?boolean} dragSelection Enable creating regions by dragging with\r\n * the mouse\r\n * @property {?RegionParams[]} regions Regions that should be added upon\r\n * initialisation\r\n * @property {number} slop=2 The sensitivity of the mouse dragging\r\n * @property {?number} snapToGridInterval Snap the regions to a grid of the specified multiples in seconds\r\n * @property {?number} snapToGridOffset Shift the snap-to-grid by the specified seconds. May also be negative.\r\n * @property {?boolean} deferInit Set to true to manually call\r\n * @property {number[]} maxRegions Maximum number of regions that may be created by the user at one time.\r\n * `initPlugin('regions')`\r\n * @property {function} formatTimeCallback Allows custom formating for region tooltip.\r\n * @property {?number} edgeScrollWidth='5% from container edges' Optional width for edgeScroll to start\r\n */\r\n\r\n/**\r\n * @typedef {Object} RegionParams\r\n * @desc The parameters used to describe a region.\r\n * @example wavesurfer.addRegion(regionParams);\r\n * @property {string} id=→random The id of the region\r\n * @property {number} start=0 The start position of the region (in seconds).\r\n * @property {number} end=0 The end position of the region (in seconds).\r\n * @property {?boolean} loop Whether to loop the region when played back.\r\n * @property {boolean} drag=true Allow/disallow dragging the region.\r\n * @property {boolean} resize=true Allow/disallow resizing the region.\r\n * @property {string} [color='rgba(0, 0, 0, 0.1)'] HTML color code.\r\n * @property {?number} channelIdx Select channel to draw the region on (if there are multiple channel waveforms).\r\n * @property {?object} handleStyle A set of CSS properties used to style the left and right handle.\r\n * @property {?boolean} preventContextMenu=false Determines whether the context menu is prevented from being opened.\r\n * @property {boolean} showTooltip=true Enable/disable tooltip displaying start and end times when hovering over region.\r\n */\r\n\r\nimport {Region} from \"./region.js\";\r\n\r\n/**\r\n * Regions are visual overlays on waveform that can be used to play and loop\r\n * portions of audio. Regions can be dragged and resized.\r\n *\r\n * Visual customization is possible via CSS (using the selectors\r\n * `.wavesurfer-region` and `.wavesurfer-handle`).\r\n *\r\n * @implements {PluginClass}\r\n * @extends {Observer}\r\n *\r\n * @example\r\n * // es6\r\n * import RegionsPlugin from 'wavesurfer.regions.js';\r\n *\r\n * // commonjs\r\n * var RegionsPlugin = require('wavesurfer.regions.js');\r\n *\r\n * // if you are using <script> tags\r\n * var RegionsPlugin = window.WaveSurfer.regions;\r\n *\r\n * // ... initialising wavesurfer with the plugin\r\n * var wavesurfer = WaveSurfer.create({\r\n *   // wavesurfer options ...\r\n *   plugins: [\r\n *     RegionsPlugin.create({\r\n *       // plugin options ...\r\n *     })\r\n *   ]\r\n * });\r\n */\r\nexport default class RegionsPlugin {\r\n    /**\r\n     * Regions plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * @param {RegionsPluginParams} params parameters use to initialise the plugin\r\n     * @return {PluginDefinition} an object representing the plugin\r\n     */\r\n    static create(params) {\r\n        return {\r\n            name: 'regions',\r\n            deferInit: params && params.deferInit ? params.deferInit : false,\r\n            params: params,\r\n            staticProps: {\r\n                addRegion(options) {\r\n                    if (!this.initialisedPluginList.regions) {\r\n                        this.initPlugin('regions');\r\n                    }\r\n                    return this.regions.add(options);\r\n                },\r\n\r\n                clearRegions() {\r\n                    this.regions && this.regions.clear();\r\n                },\r\n\r\n                enableDragSelection(options) {\r\n                    if (!this.initialisedPluginList.regions) {\r\n                        this.initPlugin('regions');\r\n                    }\r\n                    this.regions.enableDragSelection(options);\r\n                },\r\n\r\n                disableDragSelection() {\r\n                    this.regions.disableDragSelection();\r\n                }\r\n            },\r\n            instance: RegionsPlugin\r\n        };\r\n    }\r\n\r\n    constructor(params, ws) {\r\n        this.params = params;\r\n        this.wavesurfer = ws;\r\n        this.util = {\r\n            ...ws.util,\r\n            getRegionSnapToGridValue: value => {\r\n                return this.getRegionSnapToGridValue(value, params);\r\n            }\r\n        };\r\n        this.maxRegions = params.maxRegions;\r\n        this.regionsMinLength = params.regionsMinLength || null;\r\n\r\n        // turn the plugin instance into an observer\r\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\r\n            this.util.Observer.prototype\r\n        );\r\n        observerPrototypeKeys.forEach(key => {\r\n            Region.prototype[key] = this.util.Observer.prototype[key];\r\n        });\r\n        this.wavesurfer.Region = Region;\r\n\r\n        // By default, scroll the container if the user drags a region\r\n        // within 5% (based on its initial size) of its edge\r\n        const scrollWidthProportion = 0.05;\r\n        this._onBackendCreated = () => {\r\n            this.wrapper = this.wavesurfer.drawer.wrapper;\r\n            this.orientation = this.wavesurfer.drawer.orientation;\r\n            this.defaultEdgeScrollWidth = this.wrapper.clientWidth * scrollWidthProportion;\r\n            if (this.params.regions) {\r\n                this.params.regions.forEach(region => {\r\n                    this.add(region);\r\n                });\r\n            }\r\n        };\r\n\r\n        // Id-based hash of regions\r\n        this.list = {};\r\n        this._onReady = () => {\r\n            this.wrapper = this.wavesurfer.drawer.wrapper;\r\n            this.vertical = this.wavesurfer.drawer.params.vertical;\r\n            if (this.params.dragSelection) {\r\n                this.enableDragSelection(this.params);\r\n            }\r\n            Object.keys(this.list).forEach(id => {\r\n                this.list[id].updateRender();\r\n            });\r\n        };\r\n    }\r\n\r\n    init() {\r\n        // Check if ws is ready\r\n        if (this.wavesurfer.isReady) {\r\n            this._onBackendCreated();\r\n            this._onReady();\r\n        } else {\r\n            this.wavesurfer.once('ready', this._onReady);\r\n            this.wavesurfer.once('backend-created', this._onBackendCreated);\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.wavesurfer.un('ready', this._onReady);\r\n        this.wavesurfer.un('backend-created', this._onBackendCreated);\r\n        // Disabling `region-removed' because destroying the plugin calls\r\n        // the Region.remove() method that is also used to remove regions based\r\n        // on user input. This can cause confusion since teardown is not a\r\n        // user event, but would emit `region-removed` as if it was.\r\n        this.wavesurfer.setDisabledEventEmissions(['region-removed']);\r\n        this.disableDragSelection();\r\n        this.clear();\r\n    }\r\n\r\n    /**\r\n     * check to see if adding a new region would exceed maxRegions\r\n     * @return {boolean} whether we should proceed and create a region\r\n     * @private\r\n     */\r\n    wouldExceedMaxRegions() {\r\n        return (\r\n            this.maxRegions && Object.keys(this.list).length >= this.maxRegions\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Add a region\r\n     *\r\n     * @param {object} params Region parameters\r\n     * @return {Region} The created region\r\n     */\r\n    add(params) {\r\n        if (this.wouldExceedMaxRegions()) {\r\n            return null;\r\n        }\r\n\r\n        params = {\r\n            edgeScrollWidth: this.params.edgeScrollWidth || this.defaultEdgeScrollWidth,\r\n            ...params\r\n        };\r\n\r\n        // Take formatTimeCallback from plugin params if not already set\r\n        if (!params.formatTimeCallback && this.params.formatTimeCallback) {\r\n            params = {...params, formatTimeCallback: this.params.formatTimeCallback};\r\n        }\r\n\r\n        if (!params.minLength && this.regionsMinLength) {\r\n            params = {...params, minLength: this.regionsMinLength};\r\n        }\r\n\r\n        const region = new this.wavesurfer.Region(params, this.util, this.wavesurfer);\r\n\r\n        this.list[region.id] = region;\r\n\r\n        region.on('remove', () => {\r\n            delete this.list[region.id];\r\n        });\r\n\r\n        return region;\r\n    }\r\n\r\n    /**\r\n     * Remove all regions\r\n     */\r\n    clear() {\r\n        Object.keys(this.list).forEach(id => {\r\n            this.list[id].remove();\r\n        });\r\n    }\r\n\r\n    enableDragSelection(params) {\r\n        this.disableDragSelection();\r\n\r\n        const slop = params.slop || 2;\r\n        const container = this.wavesurfer.drawer.container;\r\n        const scroll =\r\n            params.scroll !== false && this.wavesurfer.params.scrollParent;\r\n        const scrollSpeed = params.scrollSpeed || 1;\r\n        const scrollThreshold = params.scrollThreshold || 10;\r\n        let drag;\r\n        let duration = this.wavesurfer.getDuration();\r\n        let maxScroll;\r\n        let start;\r\n        let region;\r\n        let touchId;\r\n        let pxMove = 0;\r\n        let scrollDirection;\r\n        let wrapperRect;\r\n\r\n        // Scroll when the user is dragging within the threshold\r\n        const edgeScroll = e => {\r\n            if (!region || !scrollDirection) {\r\n                return;\r\n            }\r\n\r\n            // Update scroll position\r\n            let scrollLeft =\r\n                this.wrapper.scrollLeft + scrollSpeed * scrollDirection;\r\n            this.wrapper.scrollLeft = scrollLeft = Math.min(\r\n                maxScroll,\r\n                Math.max(0, scrollLeft)\r\n            );\r\n\r\n            // Update range\r\n            const end = this.wavesurfer.drawer.handleEvent(e);\r\n            region.update({\r\n                start: Math.min(end * duration, start * duration),\r\n                end: Math.max(end * duration, start * duration)\r\n            });\r\n\r\n            // Check that there is more to scroll and repeat\r\n            if (scrollLeft < maxScroll && scrollLeft > 0) {\r\n                window.requestAnimationFrame(() => {\r\n                    edgeScroll(e);\r\n                });\r\n            }\r\n        };\r\n\r\n        const eventDown = e => {\r\n            if (e.touches && e.touches.length > 1) {\r\n                return;\r\n            }\r\n            duration = this.wavesurfer.getDuration();\r\n            touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\r\n\r\n            // Store for scroll calculations\r\n            maxScroll = this.wrapper.scrollWidth -\r\n                this.wrapper.clientWidth;\r\n            wrapperRect = this.util.withOrientation(\r\n                this.wrapper.getBoundingClientRect(),\r\n                this.vertical\r\n            );\r\n\r\n            // set the region channel index based on the clicked area\r\n            if (this.wavesurfer.params.splitChannels) {\r\n                const y = (e.touches ? e.touches[0].clientY : e.clientY) - wrapperRect.top;\r\n                const channelCount = this.wavesurfer.backend.buffer != null ? this.wavesurfer.backend.buffer.numberOfChannels : 1;\r\n                const channelHeight = this.wrapper.clientHeight / channelCount;\r\n                const channelIdx = Math.floor(y / channelHeight);\r\n                params.channelIdx = channelIdx;\r\n                const channelColors = this.wavesurfer.params.splitChannelsOptions.channelColors[channelIdx];\r\n                if (channelColors && channelColors.dragColor) {\r\n                    params.color = channelColors.dragColor;\r\n                }\r\n            }\r\n\r\n            drag = true;\r\n            start = this.wavesurfer.drawer.handleEvent(e, true);\r\n            region = null;\r\n            scrollDirection = null;\r\n        };\r\n        this.wrapper.addEventListener('mousedown', eventDown);\r\n        this.wrapper.addEventListener('touchstart', eventDown);\r\n        this.on('disable-drag-selection', () => {\r\n            this.wrapper.removeEventListener('touchstart', eventDown);\r\n            this.wrapper.removeEventListener('mousedown', eventDown);\r\n        });\r\n\r\n        const eventUp = e => {\r\n            if (e.touches && e.touches.length > 1) {\r\n                return;\r\n            }\r\n\r\n            drag = false;\r\n            pxMove = 0;\r\n            scrollDirection = null;\r\n\r\n            if (region) {\r\n                this.util.preventClick();\r\n                region.fireEvent('update-end', e);\r\n                this.wavesurfer.fireEvent('region-update-end', region, e);\r\n            }\r\n\r\n            region = null;\r\n        };\r\n        this.wrapper.addEventListener('mouseleave', eventUp);\r\n        this.wrapper.addEventListener('mouseup', eventUp);\r\n        this.wrapper.addEventListener('touchend', eventUp);\r\n\r\n        document.body.addEventListener('mouseup', eventUp);\r\n        document.body.addEventListener('touchend', eventUp);\r\n        this.on('disable-drag-selection', () => {\r\n            document.body.removeEventListener('mouseup', eventUp);\r\n            document.body.removeEventListener('touchend', eventUp);\r\n            this.wrapper.removeEventListener('touchend', eventUp);\r\n            this.wrapper.removeEventListener('mouseup', eventUp);\r\n            this.wrapper.removeEventListener('mouseleave', eventUp);\r\n        });\r\n\r\n        const eventMove = event => {\r\n            if (!drag) {\r\n                return;\r\n            }\r\n            if (++pxMove <= slop) {\r\n                return;\r\n            }\r\n\r\n            if (event.touches && event.touches.length > 1) {\r\n                return;\r\n            }\r\n            if (event.targetTouches && event.targetTouches[0].identifier != touchId) {\r\n                return;\r\n            }\r\n\r\n            // auto-create a region during mouse drag, unless region-count would exceed \"maxRegions\"\r\n            if (!region) {\r\n                region = this.add(params || {});\r\n                if (!region) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            const end = this.wavesurfer.drawer.handleEvent(event);\r\n            const startUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\r\n                start * duration\r\n            );\r\n            const endUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\r\n                end * duration\r\n            );\r\n            region.update({\r\n                start: Math.min(endUpdate, startUpdate),\r\n                end: Math.max(endUpdate, startUpdate)\r\n            });\r\n\r\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\r\n\r\n            // If scrolling is enabled\r\n            if (scroll && container.clientWidth < this.wrapper.scrollWidth) {\r\n                // Check threshold based on mouse\r\n                const x = orientedEvent.clientX - wrapperRect.left;\r\n                if (x <= scrollThreshold) {\r\n                    scrollDirection = -1;\r\n                } else if (x >= wrapperRect.right - scrollThreshold) {\r\n                    scrollDirection = 1;\r\n                } else {\r\n                    scrollDirection = null;\r\n                }\r\n                scrollDirection && edgeScroll(event);\r\n            }\r\n        };\r\n        this.wrapper.addEventListener('mousemove', eventMove);\r\n        this.wrapper.addEventListener('touchmove', eventMove);\r\n        this.on('disable-drag-selection', () => {\r\n            this.wrapper.removeEventListener('touchmove', eventMove);\r\n            this.wrapper.removeEventListener('mousemove', eventMove);\r\n        });\r\n\r\n        this.wavesurfer.on('region-created', region => {\r\n            if (this.regionsMinLength) {\r\n                region.minLength = this.regionsMinLength;\r\n            }\r\n        });\r\n    }\r\n\r\n    disableDragSelection() {\r\n        this.fireEvent('disable-drag-selection');\r\n    }\r\n\r\n    /**\r\n     * Get current region\r\n     *\r\n     * The smallest region that contains the current time. If several such\r\n     * regions exist, take the first. Return `null` if none exist.\r\n     *\r\n     * @returns {Region} The current region\r\n     */\r\n    getCurrentRegion() {\r\n        const time = this.wavesurfer.getCurrentTime();\r\n        let min = null;\r\n        Object.keys(this.list).forEach(id => {\r\n            const cur = this.list[id];\r\n            if (cur.start <= time && cur.end >= time) {\r\n                if (!min || cur.end - cur.start < min.end - min.start) {\r\n                    min = cur;\r\n                }\r\n            }\r\n        });\r\n\r\n        return min;\r\n    }\r\n\r\n    /**\r\n     * Match the value to the grid, if required\r\n     *\r\n     * If the regions plugin params have a snapToGridInterval set, return the\r\n     * value matching the nearest grid interval. If no snapToGridInterval is set,\r\n     * the passed value will be returned without modification.\r\n     *\r\n     * @param {number} value the value to snap to the grid, if needed\r\n     * @param {Object} params the regions plugin params\r\n     * @returns {number} value\r\n     */\r\n    getRegionSnapToGridValue(value, params) {\r\n        if (params.snapToGridInterval) {\r\n            // the regions should snap to a grid\r\n            const offset = params.snapToGridOffset || 0;\r\n            return (\r\n                Math.round((value - offset) / params.snapToGridInterval) *\r\n                    params.snapToGridInterval +\r\n                offset\r\n            );\r\n        }\r\n\r\n        // no snap-to-grid\r\n        return value;\r\n    }\r\n}\r\n","/**\r\n *  @since 4.0.0\r\n *\r\n * (Single) Region plugin class\r\n *\r\n * Must be turned into an observer before instantiating. This is done in\r\n * `RegionsPlugin` (main plugin class).\r\n *\r\n * @extends {Observer}\r\n */\r\nexport class Region {\r\n    constructor(params, regionsUtils, ws) {\r\n        this.wavesurfer = ws;\r\n        this.wrapper = ws.drawer.wrapper;\r\n        this.util = ws.util;\r\n        this.style = this.util.style;\r\n        this.regionsUtil = regionsUtils;\r\n        this.vertical = ws.drawer.params.vertical;\r\n\r\n        this.id = params.id == null ? ws.util.getId() : params.id;\r\n        this.start = Number(params.start) || 0;\r\n        this.end =\r\n            params.end == null\r\n                ? // small marker-like region\r\n                this.start +\r\n                (4 / this.wrapper.scrollWidth) * this.wavesurfer.getDuration()\r\n                : Number(params.end);\r\n        this.resize =\r\n            params.resize === undefined ? true : Boolean(params.resize);\r\n        this.drag = params.drag === undefined ? true : Boolean(params.drag);\r\n        // reflect resize and drag state of region for region-updated listener\r\n        this.isResizing = false;\r\n        this.isDragging = false;\r\n        this.loop = Boolean(params.loop);\r\n        this.color = params.color || 'rgba(0, 0, 0, 0.1)';\r\n        // The left and right handleStyle properties can be set to 'none' for\r\n        // no styling or can be assigned an object containing CSS properties.\r\n        this.handleStyle = params.handleStyle || {\r\n            left: {},\r\n            right: {}\r\n        };\r\n        this.handleLeftEl = null;\r\n        this.handleRightEl = null;\r\n        this.data = params.data || {};\r\n        this.attributes = params.attributes || {};\r\n        this.showTooltip = params.showTooltip ?? true;\r\n\r\n        this.maxLength = params.maxLength;\r\n        // It assumes the minLength parameter value, or the regionsMinLength parameter value, if the first one not provided\r\n        this.minLength = params.minLength;\r\n        this._onRedraw = () => this.updateRender();\r\n\r\n        this.scroll = params.scroll !== false && ws.params.scrollParent;\r\n        this.scrollSpeed = params.scrollSpeed || 1;\r\n        this.scrollThreshold = params.scrollThreshold || 10;\r\n        // Determines whether the context menu is prevented from being opened.\r\n        this.preventContextMenu =\r\n            params.preventContextMenu === undefined\r\n                ? false\r\n                : Boolean(params.preventContextMenu);\r\n\r\n        // select channel ID to set region\r\n        let channelIdx =\r\n            params.channelIdx == null ? -1 : parseInt(params.channelIdx);\r\n        this.channelIdx = channelIdx;\r\n        this.regionHeight = '100%';\r\n        this.marginTop = '0px';\r\n\r\n        if (channelIdx !== -1) {\r\n            let channelCount =\r\n                this.wavesurfer.backend.buffer != null\r\n                    ? this.wavesurfer.backend.buffer.numberOfChannels\r\n                    : -1;\r\n            if (channelCount >= 0 && channelIdx < channelCount) {\r\n                this.regionHeight = Math.floor((1 / channelCount) * 100) + '%';\r\n                this.marginTop =\r\n                    this.wavesurfer.getHeight() * channelIdx + 'px';\r\n            }\r\n        }\r\n\r\n        this.formatTimeCallback = params.formatTimeCallback;\r\n        this.edgeScrollWidth = params.edgeScrollWidth;\r\n        this.bindInOut();\r\n        this.render();\r\n        this.wavesurfer.on('zoom', this._onRedraw);\r\n        this.wavesurfer.on('redraw', this._onRedraw);\r\n        this.wavesurfer.fireEvent('region-created', this);\r\n    }\r\n\r\n    /* Update region params. */\r\n    update(params, eventParams) {\r\n        if (params.start != null) {\r\n            this.start = Number(params.start);\r\n        }\r\n        if (params.end != null) {\r\n            this.end = Number(params.end);\r\n        }\r\n        if (params.loop != null) {\r\n            this.loop = Boolean(params.loop);\r\n        }\r\n        if (params.color != null) {\r\n            this.color = params.color;\r\n        }\r\n        if (params.handleStyle != null) {\r\n            this.handleStyle = params.handleStyle;\r\n        }\r\n        if (params.data != null) {\r\n            this.data = params.data;\r\n        }\r\n        if (params.resize != null) {\r\n            this.resize = Boolean(params.resize);\r\n            this.updateHandlesResize(this.resize);\r\n        }\r\n        if (params.drag != null) {\r\n            this.drag = Boolean(params.drag);\r\n        }\r\n        if (params.maxLength != null) {\r\n            this.maxLength = Number(params.maxLength);\r\n        }\r\n        if (params.minLength != null) {\r\n            this.minLength = Number(params.minLength);\r\n        }\r\n        if (params.attributes != null) {\r\n            this.attributes = params.attributes;\r\n        }\r\n\r\n        this.updateRender();\r\n        this.fireEvent('update');\r\n        this.wavesurfer.fireEvent('region-updated', this, eventParams);\r\n    }\r\n\r\n    /* Remove a single region. */\r\n    remove() {\r\n        if (this.element) {\r\n            this.wrapper.removeChild(this.element.domElement);\r\n            this.element = null;\r\n            this.fireEvent('remove');\r\n            this.wavesurfer.un('zoom', this._onRedraw);\r\n            this.wavesurfer.un('redraw', this._onRedraw);\r\n            this.wavesurfer.fireEvent('region-removed', this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Play the audio region.\r\n     * @param {number} start Optional offset to start playing at\r\n     */\r\n    play(start) {\r\n        const s = start || this.start;\r\n        this.wavesurfer.play(s, this.end);\r\n        this.fireEvent('play');\r\n        this.wavesurfer.fireEvent('region-play', this);\r\n    }\r\n\r\n    /**\r\n     * Play the audio region in a loop.\r\n     * @param {number} start Optional offset to start playing at\r\n     * */\r\n    playLoop(start) {\r\n        this.loop = true;\r\n        this.play(start);\r\n    }\r\n\r\n    /**\r\n     * Set looping on/off.\r\n     * @param {boolean} loop True if should play in loop\r\n     */\r\n    setLoop(loop) {\r\n        this.loop = loop;\r\n    }\r\n\r\n    /* Render a region as a DOM element. */\r\n    render() {\r\n        this.element = this.util.withOrientation(\r\n            this.wrapper.appendChild(document.createElement('region')),\r\n            this.vertical\r\n        );\r\n\r\n        this.element.className = 'wavesurfer-region';\r\n        if (this.showTooltip) {\r\n            this.element.title = this.formatTime(this.start, this.end);\r\n        }\r\n        this.element.setAttribute('data-id', this.id);\r\n\r\n        for (const attrname in this.attributes) {\r\n            this.element.setAttribute(\r\n                'data-region-' + attrname,\r\n                this.attributes[attrname]\r\n            );\r\n        }\r\n\r\n        this.style(this.element, {\r\n            position: 'absolute',\r\n            zIndex: 3,\r\n            height: this.regionHeight,\r\n            top: this.marginTop\r\n        });\r\n\r\n        /* Resize handles */\r\n        if (this.resize) {\r\n            this.handleLeftEl = this.util.withOrientation(\r\n                this.element.appendChild(document.createElement('handle')),\r\n                this.vertical\r\n            );\r\n            this.handleRightEl = this.util.withOrientation(\r\n                this.element.appendChild(document.createElement('handle')),\r\n                this.vertical\r\n            );\r\n\r\n            this.handleLeftEl.className = 'wavesurfer-handle wavesurfer-handle-start';\r\n            this.handleRightEl.className = 'wavesurfer-handle wavesurfer-handle-end';\r\n\r\n            // Default CSS properties for both handles.\r\n            const css = {\r\n                cursor: this.vertical ? 'row-resize' : 'col-resize',\r\n                position: 'absolute',\r\n                top: '0px',\r\n                width: '2px',\r\n                height: '100%',\r\n                backgroundColor: 'rgba(0, 0, 0, 1)'\r\n            };\r\n\r\n            // Merge CSS properties per handle.\r\n            const handleLeftCss =\r\n                this.handleStyle.left !== 'none'\r\n                    ? Object.assign(\r\n                        { left: '0px' },\r\n                        css,\r\n                        this.handleStyle.left\r\n                    )\r\n                    : null;\r\n            const handleRightCss =\r\n                this.handleStyle.right !== 'none'\r\n                    ? Object.assign(\r\n                        { right: '0px' },\r\n                        css,\r\n                        this.handleStyle.right\r\n                    )\r\n                    : null;\r\n\r\n            if (handleLeftCss) {\r\n                this.style(this.handleLeftEl, handleLeftCss);\r\n            }\r\n\r\n            if (handleRightCss) {\r\n                this.style(this.handleRightEl, handleRightCss);\r\n            }\r\n        }\r\n\r\n        this.updateRender();\r\n        this.bindEvents();\r\n    }\r\n\r\n    formatTime(start, end) {\r\n        if (this.formatTimeCallback) {\r\n            return this.formatTimeCallback(start, end);\r\n        }\r\n        return (start == end ? [start] : [start, end])\r\n            .map((time) =>\r\n                [\r\n                    Math.floor((time % 3600) / 60), // minutes\r\n                    ('00' + Math.floor(time % 60)).slice(-2) // seconds\r\n                ].join(':')\r\n            )\r\n            .join('-');\r\n    }\r\n\r\n    getWidth() {\r\n        return this.wavesurfer.drawer.width / this.wavesurfer.params.pixelRatio;\r\n    }\r\n\r\n    /* Update element's position, width, color. */\r\n    updateRender() {\r\n        // duration varies during loading process, so don't overwrite important data\r\n        const dur = this.wavesurfer.getDuration();\r\n        const width = this.getWidth();\r\n\r\n        let startLimited = this.start;\r\n        let endLimited = this.end;\r\n        if (startLimited < 0) {\r\n            startLimited = 0;\r\n            endLimited = endLimited - startLimited;\r\n        }\r\n        if (endLimited > dur) {\r\n            endLimited = dur;\r\n            startLimited = dur - (endLimited - startLimited);\r\n        }\r\n\r\n        if (this.minLength != null) {\r\n            endLimited = Math.max(startLimited + this.minLength, endLimited);\r\n        }\r\n\r\n        if (this.maxLength != null) {\r\n            endLimited = Math.min(startLimited + this.maxLength, endLimited);\r\n        }\r\n\r\n        if (this.element != null) {\r\n            // Calculate the left and width values of the region such that\r\n            // no gaps appear between regions.\r\n            const left = Math.round((startLimited / dur) * width);\r\n            const regionWidth = Math.round((endLimited / dur) * width) - left;\r\n\r\n            this.style(this.element, {\r\n                left: left + 'px',\r\n                width: regionWidth + 'px',\r\n                backgroundColor: this.color,\r\n                cursor: this.drag ? 'move' : 'default'\r\n            });\r\n\r\n            for (const attrname in this.attributes) {\r\n                this.element.setAttribute(\r\n                    'data-region-' + attrname,\r\n                    this.attributes[attrname]\r\n                );\r\n            }\r\n\r\n            if (this.showTooltip) {\r\n                this.element.title = this.formatTime(this.start, this.end);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Bind audio events. */\r\n    bindInOut() {\r\n        this.firedIn = false;\r\n        this.firedOut = false;\r\n\r\n        const onProcess = (time) => {\r\n            let start = Math.round(this.start * 10) / 10;\r\n            let end = Math.round(this.end * 10) / 10;\r\n            time = Math.round(time * 10) / 10;\r\n\r\n            if (\r\n                !this.firedOut &&\r\n                this.firedIn &&\r\n                (start > time || end <= time)\r\n            ) {\r\n                this.firedOut = true;\r\n                this.firedIn = false;\r\n                this.fireEvent('out');\r\n                this.wavesurfer.fireEvent('region-out', this);\r\n            }\r\n            if (!this.firedIn && start <= time && end > time) {\r\n                this.firedIn = true;\r\n                this.firedOut = false;\r\n                this.fireEvent('in');\r\n                this.wavesurfer.fireEvent('region-in', this);\r\n            }\r\n        };\r\n\r\n        this.wavesurfer.backend.on('audioprocess', onProcess);\r\n\r\n        this.on('remove', () => {\r\n            this.wavesurfer.backend.un('audioprocess', onProcess);\r\n        });\r\n\r\n        /* Loop playback. */\r\n        this.on('out', () => {\r\n            if (this.loop) {\r\n                const realTime = this.wavesurfer.getCurrentTime();\r\n                if (realTime >= this.start && realTime <= this.end) {\r\n                    this.wavesurfer.play(this.start);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /* Bind DOM events. */\r\n    bindEvents() {\r\n        const preventContextMenu = this.preventContextMenu;\r\n\r\n        this.element.addEventListener('mouseenter', (e) => {\r\n            this.fireEvent('mouseenter', e);\r\n            this.wavesurfer.fireEvent('region-mouseenter', this, e);\r\n        });\r\n\r\n        this.element.addEventListener('mouseleave', (e) => {\r\n            this.fireEvent('mouseleave', e);\r\n            this.wavesurfer.fireEvent('region-mouseleave', this, e);\r\n        });\r\n\r\n        this.element.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n            this.fireEvent('click', e);\r\n            this.wavesurfer.fireEvent('region-click', this, e);\r\n        });\r\n\r\n        this.element.addEventListener('dblclick', (e) => {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            this.fireEvent('dblclick', e);\r\n            this.wavesurfer.fireEvent('region-dblclick', this, e);\r\n        });\r\n\r\n        this.element.addEventListener('contextmenu', (e) => {\r\n            if (preventContextMenu) {\r\n                e.preventDefault();\r\n            }\r\n            this.fireEvent('contextmenu', e);\r\n            this.wavesurfer.fireEvent('region-contextmenu', this, e);\r\n        });\r\n\r\n        /* Drag or resize on mousemove. */\r\n        if (this.drag || this.resize) {\r\n            this.bindDragEvents();\r\n        }\r\n    }\r\n\r\n    bindDragEvents() {\r\n        const container = this.wavesurfer.drawer.container;\r\n        const scrollSpeed = this.scrollSpeed;\r\n        const scrollThreshold = this.scrollThreshold;\r\n        let startTime;\r\n        let touchId;\r\n        let drag;\r\n        let maxScroll;\r\n        let resize;\r\n        let updated = false;\r\n        let scrollDirection;\r\n        let wrapperRect;\r\n        let regionLeftHalfTime;\r\n        let regionRightHalfTime;\r\n\r\n        // Scroll when the user is dragging within the threshold\r\n        const edgeScroll = (event) => {\r\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\r\n            const duration = this.wavesurfer.getDuration();\r\n            if (!scrollDirection || (!drag && !resize)) {\r\n                return;\r\n            }\r\n\r\n            const x = orientedEvent.clientX;\r\n            let distanceBetweenCursorAndWrapperEdge = 0;\r\n            let regionHalfTimeWidth = 0;\r\n            let adjustment = 0;\r\n\r\n            // Get the currently selected time according to the mouse position\r\n            let time = this.regionsUtil.getRegionSnapToGridValue(\r\n                this.wavesurfer.drawer.handleEvent(event) * duration\r\n            );\r\n\r\n            if (drag) {\r\n                // Considering the point of contact with the region while edgescrolling\r\n                if (scrollDirection === -1) {\r\n                    regionHalfTimeWidth = regionLeftHalfTime * this.wavesurfer.params.minPxPerSec;\r\n                    distanceBetweenCursorAndWrapperEdge = x - wrapperRect.left;\r\n                } else {\r\n                    regionHalfTimeWidth = regionRightHalfTime * this.wavesurfer.params.minPxPerSec;\r\n                    distanceBetweenCursorAndWrapperEdge = wrapperRect.right - x;\r\n                }\r\n            } else {\r\n                // Considering minLength while edgescroll\r\n                let minLength = this.minLength;\r\n                if (!minLength) {\r\n                    minLength = 0;\r\n                }\r\n\r\n                if (resize === 'start') {\r\n                    if (time > this.end - minLength) {\r\n                        time = this.end - minLength;\r\n                        adjustment = scrollSpeed * scrollDirection;\r\n                    }\r\n\r\n                    if (time < 0) {\r\n                        time = 0;\r\n                    }\r\n                } else if (resize === 'end') {\r\n                    if (time < this.start + minLength) {\r\n                        time = this.start + minLength;\r\n                        adjustment = scrollSpeed * scrollDirection;\r\n                    }\r\n\r\n                    if (time > duration) {\r\n                        time = duration;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Don't edgescroll if region has reached min or max limit\r\n            const wrapperScrollLeft = this.wrapper.scrollLeft;\r\n\r\n            if (scrollDirection === -1) {\r\n                if (Math.round(wrapperScrollLeft) === 0) {\r\n                    return;\r\n                }\r\n\r\n                if (Math.round(wrapperScrollLeft - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge) <= 0) {\r\n                    return;\r\n                }\r\n            } else {\r\n                if (Math.round(wrapperScrollLeft) === maxScroll) {\r\n                    return;\r\n                }\r\n\r\n                if (Math.round(wrapperScrollLeft + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge) >= maxScroll) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // Update scroll position\r\n            let scrollLeft = wrapperScrollLeft - adjustment + scrollSpeed * scrollDirection;\r\n\r\n            if (scrollDirection === -1) {\r\n                const calculatedLeft = Math.max(0 + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge, scrollLeft);\r\n                this.wrapper.scrollLeft = scrollLeft = calculatedLeft;\r\n            } else {\r\n                const calculatedRight = Math.min(maxScroll - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge, scrollLeft);\r\n                this.wrapper.scrollLeft = scrollLeft = calculatedRight;\r\n            }\r\n\r\n            const delta = time - startTime;\r\n            startTime = time;\r\n\r\n            // Continue dragging or resizing\r\n            drag ? this.onDrag(delta) : this.onResize(delta, resize);\r\n\r\n            // Repeat\r\n            window.requestAnimationFrame(() => {\r\n                edgeScroll(event);\r\n            });\r\n        };\r\n\r\n        const onDown = (event) => {\r\n            const duration = this.wavesurfer.getDuration();\r\n            if (event.touches && event.touches.length > 1) {\r\n                return;\r\n            }\r\n            touchId = event.targetTouches ? event.targetTouches[0].identifier : null;\r\n\r\n            // stop the event propagation, if this region is resizable or draggable\r\n            // and the event is therefore handled here.\r\n            if (this.drag || this.resize) {\r\n                event.stopPropagation();\r\n            }\r\n\r\n            // Store the selected startTime we begun dragging or resizing\r\n            startTime = this.regionsUtil.getRegionSnapToGridValue(\r\n                this.wavesurfer.drawer.handleEvent(event, true) * duration\r\n            );\r\n\r\n            // Store the selected point of contact when we begin dragging\r\n            regionLeftHalfTime = startTime - this.start;\r\n            regionRightHalfTime = this.end - startTime;\r\n\r\n            // Store for scroll calculations\r\n            maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\r\n\r\n            wrapperRect = this.util.withOrientation(\r\n                this.wrapper.getBoundingClientRect(),\r\n                this.vertical\r\n            );\r\n\r\n            this.isResizing = false;\r\n            this.isDragging = false;\r\n            if (event.target.tagName.toLowerCase() === 'handle') {\r\n                this.isResizing = true;\r\n                resize = event.target.classList.contains('wavesurfer-handle-start')\r\n                    ? 'start'\r\n                    : 'end';\r\n            } else {\r\n                this.isDragging = true;\r\n                drag = true;\r\n                resize = false;\r\n            }\r\n        };\r\n        const onUp = (event) => {\r\n            if (event.touches && event.touches.length > 1) {\r\n                return;\r\n            }\r\n\r\n            if (drag || resize) {\r\n                this.isDragging = false;\r\n                this.isResizing = false;\r\n                drag = false;\r\n                scrollDirection = null;\r\n                resize = false;\r\n            }\r\n\r\n            if (updated) {\r\n                updated = false;\r\n                this.util.preventClick();\r\n                this.fireEvent('update-end', event);\r\n                this.wavesurfer.fireEvent('region-update-end', this, event);\r\n            }\r\n        };\r\n        const onMove = (event) => {\r\n            const duration = this.wavesurfer.getDuration();\r\n            let orientedEvent = this.util.withOrientation(event, this.vertical);\r\n\r\n            if (event.touches && event.touches.length > 1) {\r\n                return;\r\n            }\r\n            if (event.targetTouches && event.targetTouches[0].identifier != touchId) {\r\n                return;\r\n            }\r\n            if (!drag && !resize) {\r\n                return;\r\n            }\r\n\r\n            const oldTime = startTime;\r\n            let time = this.regionsUtil.getRegionSnapToGridValue(\r\n                this.wavesurfer.drawer.handleEvent(event) * duration\r\n            );\r\n\r\n            if (drag) {\r\n                // To maintain relative cursor start point while dragging\r\n                const maxEnd = this.wavesurfer.getDuration();\r\n                if (time > maxEnd - regionRightHalfTime) {\r\n                    time = maxEnd - regionRightHalfTime;\r\n                }\r\n\r\n                if (time - regionLeftHalfTime < 0) {\r\n                    time = regionLeftHalfTime;\r\n                }\r\n            }\r\n\r\n            if (resize) {\r\n                // To maintain relative cursor start point while resizing\r\n                // we have to handle for minLength\r\n                let minLength = this.minLength;\r\n                if (!minLength) {\r\n                    minLength = 0;\r\n                }\r\n\r\n                if (resize === 'start') {\r\n                    if (time > this.end - minLength) {\r\n                        time = this.end - minLength;\r\n                    }\r\n\r\n                    if (time < 0) {\r\n                        time = 0;\r\n                    }\r\n                } else if (resize === 'end') {\r\n                    if (time < this.start + minLength) {\r\n                        time = this.start + minLength;\r\n                    }\r\n\r\n                    if (time > duration) {\r\n                        time = duration;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let delta = time - startTime;\r\n            startTime = time;\r\n\r\n            // Drag\r\n            if (this.drag && drag) {\r\n                updated = updated || !!delta;\r\n                this.onDrag(delta);\r\n            }\r\n\r\n            // Resize\r\n            if (this.resize && resize) {\r\n                updated = updated || !!delta;\r\n                this.onResize(delta, resize);\r\n            }\r\n\r\n            if (\r\n                this.scroll && container.clientWidth < this.wrapper.scrollWidth\r\n            ) {\r\n                // Triggering edgescroll from within edgeScrollWidth\r\n                let x = orientedEvent.clientX;\r\n\r\n                // Check direction\r\n                if (x < wrapperRect.left + this.edgeScrollWidth) {\r\n                    scrollDirection = -1;\r\n                } else if (x > wrapperRect.right - this.edgeScrollWidth) {\r\n                    scrollDirection = 1;\r\n                } else {\r\n                    scrollDirection = null;\r\n                }\r\n\r\n                if (scrollDirection) {\r\n                    edgeScroll(event);\r\n                }\r\n            }\r\n        };\r\n\r\n        this.element.addEventListener('mousedown', onDown);\r\n        this.element.addEventListener('touchstart', onDown);\r\n\r\n        document.body.addEventListener('mousemove', onMove);\r\n        document.body.addEventListener('touchmove', onMove, {passive: false});\r\n\r\n        document.addEventListener('mouseup', onUp);\r\n        document.body.addEventListener('touchend', onUp);\r\n\r\n        this.on('remove', () => {\r\n            document.removeEventListener('mouseup', onUp);\r\n            document.body.removeEventListener('touchend', onUp);\r\n            document.body.removeEventListener('mousemove', onMove);\r\n            document.body.removeEventListener('touchmove', onMove);\r\n        });\r\n\r\n        this.wavesurfer.on('destroy', () => {\r\n            document.removeEventListener('mouseup', onUp);\r\n            document.body.removeEventListener('touchend', onUp);\r\n        });\r\n    }\r\n\r\n    onDrag(delta) {\r\n        const maxEnd = this.wavesurfer.getDuration();\r\n        if (this.end + delta > maxEnd) {\r\n            delta = maxEnd - this.end;\r\n        }\r\n\r\n        if (this.start + delta < 0) {\r\n            delta = this.start * -1;\r\n        }\r\n\r\n        const eventParams = {\r\n            direction: this._getDragDirection(delta),\r\n            action: 'drag'\r\n        };\r\n\r\n        this.update({\r\n            start: this.start + delta,\r\n            end: this.end + delta\r\n        }, eventParams);\r\n    }\r\n\r\n    /**\r\n     * Returns the direction of dragging region based on delta\r\n     * Negative delta means region is moving to the left\r\n     * Positive - to the right\r\n     * For zero delta the direction is not defined\r\n     * @param {number} delta Drag offset\r\n     * @returns {string|null} Direction 'left', 'right' or null\r\n     */\r\n    _getDragDirection(delta) {\r\n        if (delta < 0) {\r\n            return 'left';\r\n        }\r\n        if (delta > 0) {\r\n            return 'right';\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @example\r\n     * onResize(-5, 'start') // Moves the start point 5 seconds back\r\n     * onResize(0.5, 'end') // Moves the end point 0.5 seconds forward\r\n     *\r\n     * @param {number} delta How much to add or subtract, given in seconds\r\n     * @param {string} direction 'start 'or 'end'\r\n     */\r\n    onResize(delta, direction) {\r\n        const duration = this.wavesurfer.getDuration();\r\n        const eventParams = {\r\n            action: 'resize',\r\n            direction: direction === 'start' ? 'left' : 'right'\r\n        };\r\n\r\n        if (direction === 'start') {\r\n            // Check if changing the start by the given delta would result in the region being smaller than minLength\r\n            if (delta > 0 && this.end - (this.start + delta) < this.minLength) {\r\n                delta = this.end - this.minLength - this.start;\r\n            }\r\n\r\n            // Check if changing the start by the given delta would result in the region being larger than maxLength\r\n            if (delta < 0 && this.end - (this.start + delta) > this.maxLength) {\r\n                delta = this.end - this.start - this.maxLength;\r\n            }\r\n\r\n            if (delta < 0 && (this.start + delta) < 0) {\r\n                delta = this.start * -1;\r\n            }\r\n\r\n            this.update({\r\n                start: Math.min(this.start + delta, this.end),\r\n                end: Math.max(this.start + delta, this.end)\r\n            }, eventParams);\r\n        } else {\r\n            // Check if changing the end by the given delta would result in the region being smaller than minLength\r\n            if (delta < 0 && this.end + delta - this.start < this.minLength) {\r\n                delta = this.start + this.minLength - this.end;\r\n            }\r\n\r\n            // Check if changing the end by the given delta would result in the region being larger than maxLength\r\n            if (delta > 0 && this.end + delta - this.start > this.maxLength) {\r\n                delta = this.maxLength - (this.end - this.start);\r\n            }\r\n\r\n            if (delta > 0 && (this.end + delta) > duration) {\r\n                delta = duration - this.end;\r\n            }\r\n\r\n            this.update({\r\n                start: Math.min(this.end + delta, this.start),\r\n                end: Math.max(this.end + delta, this.start)\r\n            }, eventParams);\r\n        }\r\n    }\r\n\r\n    updateHandlesResize(resize) {\r\n        let cursorStyle;\r\n        if (resize) {\r\n            cursorStyle = this.vertical ? 'row-resize' : 'col-resize';\r\n        } else {\r\n            cursorStyle = 'auto';\r\n        }\r\n\r\n        this.handleLeftEl && this.style(this.handleLeftEl, { cursor: cursorStyle });\r\n        this.handleRightEl && this.style(this.handleRightEl, { cursor: cursorStyle });\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(23);\n"],"names":["root","factory","exports","module","define","amd","self","RegionsPlugin","params","ws","this","wavesurfer","util","getRegionSnapToGridValue","value","maxRegions","regionsMinLength","Object","getOwnPropertyNames","Observer","prototype","forEach","key","Region","_onBackendCreated","wrapper","drawer","orientation","defaultEdgeScrollWidth","clientWidth","regions","region","add","list","_onReady","vertical","dragSelection","enableDragSelection","keys","id","updateRender","name","deferInit","staticProps","addRegion","options","initialisedPluginList","initPlugin","clearRegions","clear","disableDragSelection","instance","isReady","once","un","setDisabledEventEmissions","length","wouldExceedMaxRegions","edgeScrollWidth","formatTimeCallback","minLength","on","remove","drag","maxScroll","start","touchId","scrollDirection","wrapperRect","slop","container","scroll","scrollParent","scrollSpeed","scrollThreshold","duration","getDuration","pxMove","edgeScroll","e","scrollLeft","Math","min","max","end","handleEvent","update","window","requestAnimationFrame","eventDown","touches","targetTouches","identifier","scrollWidth","withOrientation","getBoundingClientRect","splitChannels","y","clientY","top","channelCount","backend","buffer","numberOfChannels","channelHeight","clientHeight","channelIdx","floor","channelColors","splitChannelsOptions","dragColor","color","addEventListener","removeEventListener","eventUp","preventClick","fireEvent","document","body","eventMove","event","startUpdate","endUpdate","orientedEvent","x","clientX","left","right","time","getCurrentTime","cur","snapToGridInterval","offset","snapToGridOffset","round","regionsUtils","style","regionsUtil","getId","Number","resize","undefined","Boolean","isResizing","isDragging","loop","handleStyle","handleLeftEl","handleRightEl","data","attributes","showTooltip","maxLength","_onRedraw","preventContextMenu","parseInt","regionHeight","marginTop","getHeight","bindInOut","render","eventParams","updateHandlesResize","element","removeChild","domElement","s","play","attrname","appendChild","createElement","className","title","formatTime","setAttribute","position","zIndex","height","css","cursor","width","backgroundColor","handleLeftCss","assign","handleRightCss","bindEvents","map","slice","join","pixelRatio","dur","getWidth","startLimited","endLimited","regionWidth","firedIn","firedOut","onProcess","realTime","preventDefault","stopPropagation","bindDragEvents","startTime","regionLeftHalfTime","regionRightHalfTime","updated","distanceBetweenCursorAndWrapperEdge","regionHalfTimeWidth","adjustment","minPxPerSec","wrapperScrollLeft","calculatedLeft","calculatedRight","delta","onDrag","onResize","onDown","target","tagName","toLowerCase","classList","contains","onUp","onMove","maxEnd","passive","direction","_getDragDirection","action","cursorStyle","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}