{"version":3,"file":"wavesurfer.spectrogram.min.js","mappings":"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","sources":["webpack://WaveSurfer.[name]/webpack/universalModuleDefinition","webpack://WaveSurfer.[name]/./src/plugin/spectrogram/fft.js","webpack://WaveSurfer.[name]/./src/plugin/spectrogram/index.js","webpack://WaveSurfer.[name]/webpack/bootstrap","webpack://WaveSurfer.[name]/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"WaveSurfer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WaveSurfer\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"spectrogram\"] = factory();\n})(self, function() {\nreturn ","/* eslint-disable complexity, no-redeclare, no-var, one-var */\r\n\r\n/**\r\n * Calculate FFT - Based on https://github.com/corbanbrook/dsp.js\r\n *\r\n * @param {Number} bufferSize Buffer size\r\n * @param {Number} sampleRate Sample rate\r\n * @param {Function} windowFunc Window function\r\n * @param {Number} alpha Alpha channel\r\n */\r\nexport default function FFT(bufferSize, sampleRate, windowFunc, alpha) {\r\n    this.bufferSize = bufferSize;\r\n    this.sampleRate = sampleRate;\r\n    this.bandwidth = (2 / bufferSize) * (sampleRate / 2);\r\n\r\n    this.sinTable = new Float32Array(bufferSize);\r\n    this.cosTable = new Float32Array(bufferSize);\r\n    this.windowValues = new Float32Array(bufferSize);\r\n    this.reverseTable = new Uint32Array(bufferSize);\r\n\r\n    this.peakBand = 0;\r\n    this.peak = 0;\r\n\r\n    var i;\r\n    switch (windowFunc) {\r\n        case 'bartlett':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    (2 / (bufferSize - 1)) *\r\n                    ((bufferSize - 1) / 2 - Math.abs(i - (bufferSize - 1) / 2));\r\n            }\r\n            break;\r\n        case 'bartlettHann':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    0.62 -\r\n                    0.48 * Math.abs(i / (bufferSize - 1) - 0.5) -\r\n                    0.38 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1));\r\n            }\r\n            break;\r\n        case 'blackman':\r\n            alpha = alpha || 0.16;\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    (1 - alpha) / 2 -\r\n                    0.5 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1)) +\r\n                    (alpha / 2) *\r\n                        Math.cos((4 * Math.PI * i) / (bufferSize - 1));\r\n            }\r\n            break;\r\n        case 'cosine':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] = Math.cos(\r\n                    (Math.PI * i) / (bufferSize - 1) - Math.PI / 2\r\n                );\r\n            }\r\n            break;\r\n        case 'gauss':\r\n            alpha = alpha || 0.25;\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] = Math.pow(\r\n                    Math.E,\r\n                    -0.5 *\r\n                        Math.pow(\r\n                            (i - (bufferSize - 1) / 2) /\r\n                                ((alpha * (bufferSize - 1)) / 2),\r\n                            2\r\n                        )\r\n                );\r\n            }\r\n            break;\r\n        case 'hamming':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    0.54 -\r\n                    0.46 * Math.cos((Math.PI * 2 * i) / (bufferSize - 1));\r\n            }\r\n            break;\r\n        case 'hann':\r\n        case undefined:\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    0.5 * (1 - Math.cos((Math.PI * 2 * i) / (bufferSize - 1)));\r\n            }\r\n            break;\r\n        case 'lanczoz':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    Math.sin(Math.PI * ((2 * i) / (bufferSize - 1) - 1)) /\r\n                    (Math.PI * ((2 * i) / (bufferSize - 1) - 1));\r\n            }\r\n            break;\r\n        case 'rectangular':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] = 1;\r\n            }\r\n            break;\r\n        case 'triangular':\r\n            for (i = 0; i < bufferSize; i++) {\r\n                this.windowValues[i] =\r\n                    (2 / bufferSize) *\r\n                    (bufferSize / 2 - Math.abs(i - (bufferSize - 1) / 2));\r\n            }\r\n            break;\r\n        default:\r\n            throw Error(\"No such window function '\" + windowFunc + \"'\");\r\n    }\r\n\r\n    var limit = 1;\r\n    var bit = bufferSize >> 1;\r\n    var i;\r\n\r\n    while (limit < bufferSize) {\r\n        for (i = 0; i < limit; i++) {\r\n            this.reverseTable[i + limit] = this.reverseTable[i] + bit;\r\n        }\r\n\r\n        limit = limit << 1;\r\n        bit = bit >> 1;\r\n    }\r\n\r\n    for (i = 0; i < bufferSize; i++) {\r\n        this.sinTable[i] = Math.sin(-Math.PI / i);\r\n        this.cosTable[i] = Math.cos(-Math.PI / i);\r\n    }\r\n\r\n    this.calculateSpectrum = function(buffer) {\r\n        // Locally scope variables for speed up\r\n        var bufferSize = this.bufferSize,\r\n            cosTable = this.cosTable,\r\n            sinTable = this.sinTable,\r\n            reverseTable = this.reverseTable,\r\n            real = new Float32Array(bufferSize),\r\n            imag = new Float32Array(bufferSize),\r\n            bSi = 2 / this.bufferSize,\r\n            sqrt = Math.sqrt,\r\n            rval,\r\n            ival,\r\n            mag,\r\n            spectrum = new Float32Array(bufferSize / 2);\r\n\r\n        var k = Math.floor(Math.log(bufferSize) / Math.LN2);\r\n\r\n        if (Math.pow(2, k) !== bufferSize) {\r\n            throw 'Invalid buffer size, must be a power of 2.';\r\n        }\r\n        if (bufferSize !== buffer.length) {\r\n            throw 'Supplied buffer is not the same size as defined FFT. FFT Size: ' +\r\n                bufferSize +\r\n                ' Buffer Size: ' +\r\n                buffer.length;\r\n        }\r\n\r\n        var halfSize = 1,\r\n            phaseShiftStepReal,\r\n            phaseShiftStepImag,\r\n            currentPhaseShiftReal,\r\n            currentPhaseShiftImag,\r\n            off,\r\n            tr,\r\n            ti,\r\n            tmpReal;\r\n\r\n        for (var i = 0; i < bufferSize; i++) {\r\n            real[i] =\r\n                buffer[reverseTable[i]] * this.windowValues[reverseTable[i]];\r\n            imag[i] = 0;\r\n        }\r\n\r\n        while (halfSize < bufferSize) {\r\n            phaseShiftStepReal = cosTable[halfSize];\r\n            phaseShiftStepImag = sinTable[halfSize];\r\n\r\n            currentPhaseShiftReal = 1;\r\n            currentPhaseShiftImag = 0;\r\n\r\n            for (var fftStep = 0; fftStep < halfSize; fftStep++) {\r\n                var i = fftStep;\r\n\r\n                while (i < bufferSize) {\r\n                    off = i + halfSize;\r\n                    tr =\r\n                        currentPhaseShiftReal * real[off] -\r\n                        currentPhaseShiftImag * imag[off];\r\n                    ti =\r\n                        currentPhaseShiftReal * imag[off] +\r\n                        currentPhaseShiftImag * real[off];\r\n\r\n                    real[off] = real[i] - tr;\r\n                    imag[off] = imag[i] - ti;\r\n                    real[i] += tr;\r\n                    imag[i] += ti;\r\n\r\n                    i += halfSize << 1;\r\n                }\r\n\r\n                tmpReal = currentPhaseShiftReal;\r\n                currentPhaseShiftReal =\r\n                    tmpReal * phaseShiftStepReal -\r\n                    currentPhaseShiftImag * phaseShiftStepImag;\r\n                currentPhaseShiftImag =\r\n                    tmpReal * phaseShiftStepImag +\r\n                    currentPhaseShiftImag * phaseShiftStepReal;\r\n            }\r\n\r\n            halfSize = halfSize << 1;\r\n        }\r\n\r\n        for (var i = 0, N = bufferSize / 2; i < N; i++) {\r\n            rval = real[i];\r\n            ival = imag[i];\r\n            mag = bSi * sqrt(rval * rval + ival * ival);\r\n\r\n            if (mag > this.peak) {\r\n                this.peakBand = i;\r\n                this.peak = mag;\r\n            }\r\n            spectrum[i] = mag;\r\n        }\r\n        return spectrum;\r\n    };\r\n}\r\n","/* eslint-enable complexity, no-redeclare, no-var, one-var */\r\n\r\nimport FFT from './fft';\r\n\r\n/**\r\n * @typedef {Object} SpectrogramPluginParams\r\n * @property {string|HTMLElement} container Selector of element or element in\r\n * which to render\r\n * @property {number} fftSamples=512 Number of samples to fetch to FFT. Must be\r\n * a power of 2.\r\n * @property {boolean} labels Set to true to display frequency labels.\r\n * @property {number} noverlap Size of the overlapping window. Must be <\r\n * fftSamples. Auto deduced from canvas size by default.\r\n * @property {string} windowFunc='hann' The window function to be used. One of\r\n * these: `'bartlett'`, `'bartlettHann'`, `'blackman'`, `'cosine'`, `'gauss'`,\r\n * `'hamming'`, `'hann'`, `'lanczoz'`, `'rectangular'`, `'triangular'`\r\n * @property {?number} alpha Some window functions have this extra value.\r\n * (Between 0 and 1)\r\n * @property {number} pixelRatio=wavesurfer.params.pixelRatio to control the\r\n * size of the spectrogram in relation with its canvas. 1 = Draw on the whole\r\n * canvas. 2 = Draw on a quarter (1/2 the length and 1/2 the width)\r\n * @property {?boolean} deferInit Set to true to manually call\r\n * `initPlugin('spectrogram')`\r\n * @property {?number[][]} colorMap A 256 long array of 4-element arrays.\r\n * Each entry should contain a float between 0 and 1 and specify\r\n * r, g, b, and alpha.\r\n */\r\n\r\n/**\r\n * Render a spectrogram visualisation of the audio.\r\n *\r\n * @implements {PluginClass}\r\n * @extends {Observer}\r\n * @example\r\n * // es6\r\n * import SpectrogramPlugin from 'wavesurfer.spectrogram.js';\r\n *\r\n * // commonjs\r\n * var SpectrogramPlugin = require('wavesurfer.spectrogram.js');\r\n *\r\n * // if you are using <script> tags\r\n * var SpectrogramPlugin = window.WaveSurfer.spectrogram;\r\n *\r\n * // ... initialising wavesurfer with the plugin\r\n * var wavesurfer = WaveSurfer.create({\r\n *   // wavesurfer options ...\r\n *   plugins: [\r\n *     SpectrogramPlugin.create({\r\n *       // plugin options ...\r\n *     })\r\n *   ]\r\n * });\r\n */\r\nexport default class SpectrogramPlugin {\r\n    /**\r\n     * Spectrogram plugin definition factory\r\n     *\r\n     * This function must be used to create a plugin definition which can be\r\n     * used by wavesurfer to correctly instantiate the plugin.\r\n     *\r\n     * @param  {SpectrogramPluginParams} params Parameters used to initialise the plugin\r\n     * @return {PluginDefinition} An object representing the plugin.\r\n     */\r\n    static create(params) {\r\n        return {\r\n            name: 'spectrogram',\r\n            deferInit: params && params.deferInit ? params.deferInit : false,\r\n            params: params,\r\n            staticProps: {\r\n                FFT: FFT\r\n            },\r\n            instance: SpectrogramPlugin\r\n        };\r\n    }\r\n\r\n    constructor(params, ws) {\r\n        this.params = params;\r\n        this.wavesurfer = ws;\r\n        this.util = ws.util;\r\n\r\n        this.frequenciesDataUrl = params.frequenciesDataUrl;\r\n        this._onScroll = e => {\r\n            this.updateScroll(e);\r\n        };\r\n        this._onRender = () => {\r\n            this.render();\r\n        };\r\n        this._onWrapperClick = e => {\r\n            this._wrapperClickHandler(e);\r\n        };\r\n        this._onReady = () => {\r\n            const drawer = (this.drawer = ws.drawer);\r\n\r\n            this.container =\r\n                'string' == typeof params.container\r\n                    ? document.querySelector(params.container)\r\n                    : params.container;\r\n\r\n            if (!this.container) {\r\n                throw Error('No container for WaveSurfer spectrogram');\r\n            }\r\n            if (params.colorMap) {\r\n                if (params.colorMap.length < 256) {\r\n                    throw new Error('Colormap must contain 256 elements');\r\n                }\r\n                for (let i = 0; i < params.colorMap.length; i++) {\r\n                    const cmEntry = params.colorMap[i];\r\n                    if (cmEntry.length !== 4) {\r\n                        throw new Error(\r\n                            'ColorMap entries must contain 4 values'\r\n                        );\r\n                    }\r\n                }\r\n                this.colorMap = params.colorMap;\r\n            } else {\r\n                this.colorMap = [];\r\n                for (let i = 0; i < 256; i++) {\r\n                    const val = (255 - i) / 256;\r\n                    this.colorMap.push([val, val, val, 1]);\r\n                }\r\n            }\r\n            this.width = drawer.width;\r\n            this.pixelRatio = this.params.pixelRatio || ws.params.pixelRatio;\r\n            this.fftSamples =\r\n                this.params.fftSamples || ws.params.fftSamples || 512;\r\n            this.height = this.fftSamples / 2;\r\n            this.noverlap = params.noverlap;\r\n            this.windowFunc = params.windowFunc;\r\n            this.alpha = params.alpha;\r\n\r\n            this.createWrapper();\r\n            this.createCanvas();\r\n            this.render();\r\n\r\n            drawer.wrapper.addEventListener('scroll', this._onScroll);\r\n            ws.on('redraw', this._onRender);\r\n        };\r\n    }\r\n\r\n    init() {\r\n        // Check if wavesurfer is ready\r\n        if (this.wavesurfer.isReady) {\r\n            this._onReady();\r\n        } else {\r\n            this.wavesurfer.once('ready', this._onReady);\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.unAll();\r\n        this.wavesurfer.un('ready', this._onReady);\r\n        this.wavesurfer.un('redraw', this._onRender);\r\n        this.drawer && this.drawer.wrapper.removeEventListener('scroll', this._onScroll);\r\n        this.wavesurfer = null;\r\n        this.util = null;\r\n        this.params = null;\r\n        if (this.wrapper) {\r\n            this.wrapper.removeEventListener('click', this._onWrapperClick);\r\n            this.wrapper.parentNode.removeChild(this.wrapper);\r\n            this.wrapper = null;\r\n        }\r\n    }\r\n\r\n    createWrapper() {\r\n        const prevSpectrogram = this.container.querySelector('spectrogram');\r\n        if (prevSpectrogram) {\r\n            this.container.removeChild(prevSpectrogram);\r\n        }\r\n        const wsParams = this.wavesurfer.params;\r\n        this.wrapper = document.createElement('spectrogram');\r\n        // if labels are active\r\n        if (this.params.labels) {\r\n            const labelsEl = (this.labelsEl = document.createElement('canvas'));\r\n            labelsEl.classList.add('spec-labels');\r\n            this.drawer.style(labelsEl, {\r\n                left: 0,\r\n                position: 'absolute',\r\n                zIndex: 9,\r\n                height: `${this.height / this.pixelRatio}px`,\r\n                width: `${55 / this.pixelRatio}px`\r\n            });\r\n            this.wrapper.appendChild(labelsEl);\r\n            this.loadLabels(\r\n                'rgba(68,68,68,0.5)',\r\n                '12px',\r\n                '10px',\r\n                '',\r\n                '#fff',\r\n                '#f7f7f7',\r\n                'center',\r\n                '#specLabels'\r\n            );\r\n        }\r\n\r\n        this.drawer.style(this.wrapper, {\r\n            display: 'block',\r\n            position: 'relative',\r\n            userSelect: 'none',\r\n            webkitUserSelect: 'none',\r\n            height: `${this.height / this.pixelRatio}px`\r\n        });\r\n\r\n        if (wsParams.fillParent || wsParams.scrollParent) {\r\n            this.drawer.style(this.wrapper, {\r\n                width: '100%',\r\n                overflowX: 'hidden',\r\n                overflowY: 'hidden'\r\n            });\r\n        }\r\n        this.container.appendChild(this.wrapper);\r\n\r\n        this.wrapper.addEventListener('click', this._onWrapperClick);\r\n    }\r\n\r\n    _wrapperClickHandler(event) {\r\n        event.preventDefault();\r\n        const relX = 'offsetX' in event ? event.offsetX : event.layerX;\r\n        this.fireEvent('click', relX / this.width || 0);\r\n    }\r\n\r\n    createCanvas() {\r\n        const canvas = (this.canvas = this.wrapper.appendChild(\r\n            document.createElement('canvas')\r\n        ));\r\n\r\n        this.spectrCc = canvas.getContext('2d');\r\n\r\n        this.util.style(canvas, {\r\n            position: 'absolute',\r\n            zIndex: 4\r\n        });\r\n    }\r\n\r\n    render() {\r\n        this.updateCanvasStyle();\r\n\r\n        if (this.frequenciesDataUrl) {\r\n            this.loadFrequenciesData(this.frequenciesDataUrl);\r\n        } else {\r\n            this.getFrequencies(this.drawSpectrogram);\r\n        }\r\n    }\r\n\r\n    updateCanvasStyle() {\r\n        const width = Math.round(this.width / this.pixelRatio) + 'px';\r\n        this.canvas.width = this.width;\r\n        this.canvas.height = this.height;\r\n        this.canvas.style.width = width;\r\n    }\r\n\r\n    drawSpectrogram(frequenciesData, my) {\r\n        const spectrCc = my.spectrCc;\r\n        const height = my.height;\r\n        const width = my.width;\r\n        const pixels = my.resample(frequenciesData);\r\n        const heightFactor = my.buffer ? 2 / my.buffer.numberOfChannels : 1;\r\n        if (spectrCc) {\r\n            const imageData = spectrCc.createImageData(width, height);\r\n            let i;\r\n            let j;\r\n            let k;\r\n\r\n            for (i = 0; i < pixels.length; i++) {\r\n                for (j = 0; j < pixels[i].length; j++) {\r\n                    const colorMap = my.colorMap[pixels[i][j]];\r\n                    /* eslint-disable max-depth */\r\n                    for (k = 0; k < heightFactor; k++) {\r\n                        let y = height - j * heightFactor;\r\n                        if (heightFactor === 2 && k === 1) {\r\n                            y--;\r\n                        }\r\n                        const redIndex = y * (width * 4) + i * 4;\r\n                        imageData.data[redIndex] = colorMap[0] * 255;\r\n                        imageData.data[redIndex + 1] = colorMap[1] * 255;\r\n                        imageData.data[redIndex + 2] = colorMap[2] * 255;\r\n                        imageData.data[redIndex + 3] = colorMap[3] * 255;\r\n                    }\r\n                    /* eslint-enable max-depth */\r\n                }\r\n            }\r\n            spectrCc.putImageData(imageData, 0, 0);\r\n        }\r\n    }\r\n\r\n    getFrequencies(callback) {\r\n        const fftSamples = this.fftSamples;\r\n        const buffer = (this.buffer = this.wavesurfer.backend.buffer);\r\n        const channelOne = buffer.getChannelData(0);\r\n        const bufferLength = buffer.length;\r\n        const sampleRate = buffer.sampleRate;\r\n        const frequencies = [];\r\n\r\n        if (!buffer) {\r\n            this.fireEvent('error', 'Web Audio buffer is not available');\r\n            return;\r\n        }\r\n\r\n        let noverlap = this.noverlap;\r\n        if (!noverlap) {\r\n            const uniqueSamplesPerPx = buffer.length / this.canvas.width;\r\n            noverlap = Math.max(0, Math.round(fftSamples - uniqueSamplesPerPx));\r\n        }\r\n\r\n        const fft = new FFT(\r\n            fftSamples,\r\n            sampleRate,\r\n            this.windowFunc,\r\n            this.alpha\r\n        );\r\n        const maxSlicesCount = Math.floor(\r\n            bufferLength / (fftSamples - noverlap)\r\n        );\r\n        let currentOffset = 0;\r\n\r\n        while (currentOffset + fftSamples < channelOne.length) {\r\n            const segment = channelOne.slice(\r\n                currentOffset,\r\n                currentOffset + fftSamples\r\n            );\r\n            const spectrum = fft.calculateSpectrum(segment);\r\n            const array = new Uint8Array(fftSamples / 2);\r\n            let j;\r\n            for (j = 0; j < fftSamples / 2; j++) {\r\n                array[j] = Math.max(-255, Math.log10(spectrum[j]) * 45);\r\n            }\r\n            frequencies.push(array);\r\n            currentOffset += fftSamples - noverlap;\r\n        }\r\n        callback(frequencies, this);\r\n    }\r\n\r\n    loadFrequenciesData(url) {\r\n        const request = this.util.fetchFile({ url: url });\r\n\r\n        request.on('success', data =>\r\n            this.drawSpectrogram(JSON.parse(data), this)\r\n        );\r\n        request.on('error', e => this.fireEvent('error', e));\r\n\r\n        return request;\r\n    }\r\n\r\n    freqType(freq) {\r\n        return freq >= 1000 ? (freq / 1000).toFixed(1) : Math.round(freq);\r\n    }\r\n\r\n    unitType(freq) {\r\n        return freq >= 1000 ? 'KHz' : 'Hz';\r\n    }\r\n\r\n    loadLabels(\r\n        bgFill,\r\n        fontSizeFreq,\r\n        fontSizeUnit,\r\n        fontType,\r\n        textColorFreq,\r\n        textColorUnit,\r\n        textAlign,\r\n        container\r\n    ) {\r\n        const frequenciesHeight = this.height;\r\n        bgFill = bgFill || 'rgba(68,68,68,0)';\r\n        fontSizeFreq = fontSizeFreq || '12px';\r\n        fontSizeUnit = fontSizeUnit || '10px';\r\n        fontType = fontType || 'Helvetica';\r\n        textColorFreq = textColorFreq || '#fff';\r\n        textColorUnit = textColorUnit || '#fff';\r\n        textAlign = textAlign || 'center';\r\n        container = container || '#specLabels';\r\n        const bgWidth = 55;\r\n        const getMaxY = frequenciesHeight || 512;\r\n        const labelIndex = 5 * (getMaxY / 256);\r\n        const freqStart = 0;\r\n        const step =\r\n            (this.wavesurfer.backend.ac.sampleRate / 2 - freqStart) /\r\n            labelIndex;\r\n\r\n        // prepare canvas element for labels\r\n        const ctx = this.labelsEl.getContext('2d');\r\n        this.labelsEl.height = this.height;\r\n        this.labelsEl.width = bgWidth;\r\n\r\n        if (ctx) {\r\n            // fill background\r\n            ctx.fillStyle = bgFill;\r\n            ctx.fillRect(0, 0, bgWidth, getMaxY);\r\n            ctx.fill();\r\n            let i;\r\n\r\n            // render labels\r\n            for (i = 0; i <= labelIndex; i++) {\r\n                ctx.textAlign = textAlign;\r\n                ctx.textBaseline = 'middle';\r\n\r\n                const freq = freqStart + step * i;\r\n                const index = Math.round(\r\n                    (freq / (this.sampleRate / 2)) * this.fftSamples\r\n                );\r\n                const label = this.freqType(freq);\r\n                const units = this.unitType(freq);\r\n                const yLabelOffset = 2;\r\n                const x = 16;\r\n                let y;\r\n\r\n                if (i == 0) {\r\n                    y = getMaxY + i - 10;\r\n                    // unit label\r\n                    ctx.fillStyle = textColorUnit;\r\n                    ctx.font = fontSizeUnit + ' ' + fontType;\r\n                    ctx.fillText(units, x + 24, y);\r\n                    // freq label\r\n                    ctx.fillStyle = textColorFreq;\r\n                    ctx.font = fontSizeFreq + ' ' + fontType;\r\n                    ctx.fillText(label, x, y);\r\n                } else {\r\n                    y = getMaxY - i * 50 + yLabelOffset;\r\n                    // unit label\r\n                    ctx.fillStyle = textColorUnit;\r\n                    ctx.font = fontSizeUnit + ' ' + fontType;\r\n                    ctx.fillText(units, x + 24, y);\r\n                    // freq label\r\n                    ctx.fillStyle = textColorFreq;\r\n                    ctx.font = fontSizeFreq + ' ' + fontType;\r\n                    ctx.fillText(label, x, y);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    updateScroll(e) {\r\n        if (this.wrapper) {\r\n            this.wrapper.scrollLeft = e.target.scrollLeft;\r\n        }\r\n    }\r\n\r\n    resample(oldMatrix) {\r\n        const columnsNumber = this.width;\r\n        const newMatrix = [];\r\n\r\n        const oldPiece = 1 / oldMatrix.length;\r\n        const newPiece = 1 / columnsNumber;\r\n        let i;\r\n\r\n        for (i = 0; i < columnsNumber; i++) {\r\n            const column = new Array(oldMatrix[0].length);\r\n            let j;\r\n\r\n            for (j = 0; j < oldMatrix.length; j++) {\r\n                const oldStart = j * oldPiece;\r\n                const oldEnd = oldStart + oldPiece;\r\n                const newStart = i * newPiece;\r\n                const newEnd = newStart + newPiece;\r\n\r\n                const overlap =\r\n                    oldEnd <= newStart || newEnd <= oldStart\r\n                        ? 0\r\n                        : Math.min(\r\n                            Math.max(oldEnd, newStart),\r\n                            Math.max(newEnd, oldStart)\r\n                        ) -\r\n                        Math.max(\r\n                            Math.min(oldEnd, newStart),\r\n                            Math.min(newEnd, oldStart)\r\n                        );\r\n                let k;\r\n                /* eslint-disable max-depth */\r\n                if (overlap > 0) {\r\n                    for (k = 0; k < oldMatrix[0].length; k++) {\r\n                        if (column[k] == null) {\r\n                            column[k] = 0;\r\n                        }\r\n                        column[k] += (overlap / newPiece) * oldMatrix[j][k];\r\n                    }\r\n                }\r\n                /* eslint-enable max-depth */\r\n            }\r\n\r\n            const intColumn = new Uint8Array(oldMatrix[0].length);\r\n            let m;\r\n\r\n            for (m = 0; m < oldMatrix[0].length; m++) {\r\n                intColumn[m] = column[m];\r\n            }\r\n\r\n            newMatrix.push(intColumn);\r\n        }\r\n\r\n        return newMatrix;\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(943);\n"],"names":["root","factory","exports","module","define","amd","self","bufferSize","sampleRate","windowFunc","alpha","this","bandwidth","sinTable","Float32Array","cosTable","windowValues","reverseTable","Uint32Array","peakBand","peak","i","Math","abs","cos","PI","pow","E","undefined","sin","Error","limit","bit","calculateSpectrum","buffer","rval","ival","mag","real","imag","bSi","sqrt","spectrum","k","floor","log","LN2","length","phaseShiftStepReal","phaseShiftStepImag","currentPhaseShiftReal","currentPhaseShiftImag","off","tr","ti","tmpReal","halfSize","fftStep","N","SpectrogramPlugin","params","ws","wavesurfer","util","frequenciesDataUrl","_onScroll","e","updateScroll","_onRender","render","_onWrapperClick","_wrapperClickHandler","_onReady","drawer","container","document","querySelector","colorMap","val","push","width","pixelRatio","fftSamples","height","noverlap","createWrapper","createCanvas","wrapper","addEventListener","on","name","deferInit","staticProps","FFT","instance","isReady","once","unAll","un","removeEventListener","parentNode","removeChild","prevSpectrogram","wsParams","createElement","labels","labelsEl","classList","add","style","left","position","zIndex","appendChild","loadLabels","display","userSelect","webkitUserSelect","fillParent","scrollParent","overflowX","overflowY","event","preventDefault","relX","offsetX","layerX","fireEvent","canvas","spectrCc","getContext","updateCanvasStyle","loadFrequenciesData","getFrequencies","drawSpectrogram","round","frequenciesData","my","pixels","resample","heightFactor","numberOfChannels","j","imageData","createImageData","y","redIndex","data","putImageData","callback","backend","channelOne","getChannelData","bufferLength","frequencies","uniqueSamplesPerPx","max","fft","currentOffset","segment","slice","array","Uint8Array","log10","url","request","fetchFile","JSON","parse","freq","toFixed","bgFill","fontSizeFreq","fontSizeUnit","fontType","textColorFreq","textColorUnit","textAlign","getMaxY","labelIndex","step","ac","ctx","fillStyle","fillRect","fill","textBaseline","label","freqType","units","unitType","font","fillText","x","scrollLeft","target","oldMatrix","columnsNumber","newMatrix","oldPiece","newPiece","column","Array","oldStart","oldEnd","newStart","newEnd","overlap","min","intColumn","m","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}